type Token = 
 service {
   allHistory: () -> (vec OpRecord) query;
   allowance: (principal, principal) -> (nat) query;
   approve: (principal, nat) -> (bool);
   balanceOf: (principal) -> (nat) query;
   burn: (principal, nat) -> (bool);
   decimals: () -> (nat) query;
   getAllAccounts: () -> (vec record {
                                principal;
                                nat;
                              }) query;
   getAllAllowed: () ->
    (vec record {
           principal;
           vec record {
                 principal;
                 nat;
               };
         }) query;
   getAllAllowedNumber: () -> (nat) query;
   getCycles: () -> (nat) query;
   getFee: () -> (nat) query;
   getFeeTo: () -> (principal) query;
   getHistory: (nat, nat) -> (vec OpRecord) query;
   getHistoryByAccount: (principal) -> (opt vec OpRecord) query;
   getHistoryByIndex: (nat) -> (OpRecord) query;
   getHolderNumber: () -> (nat) query;
   getMetadata: () -> (Metadata) query;
   getSomeAllowed: (principal) -> (vec record {
                                         principal;
                                         nat;
                                       }) query;
   getSomeAllowedNumber: (principal) -> (nat) query;
   mint: (principal, nat) -> (bool);
   name: () -> (text) query;
   owner: () -> (principal) query;
   setFee: (nat) -> (bool);
   setFeeTo: (principal) -> (bool);
   symbol: () -> (text) query;
   totalSupply: () -> (nat) query;
   transfer: (principal, nat) -> (bool);
   transferFrom: (principal, principal, nat) -> (bool);
 };
type Time = int;
type Operation = 
 variant {
   approve;
   burn;
   init;
   mint;
   transfer;
 };
type OpRecord_2 = 
 record {
   amount: nat;
   caller: principal;
   fee: nat;
   from: opt principal;
   index: nat;
   op: Operation;
   timestamp: Time;
   to: opt principal;
 };
type OpRecord = OpRecord_2;
type Metadata = 
 record {
   cycles: nat;
   decimals: nat;
   deployTime: Time;
   fee: nat;
   feeTo: principal;
   historySize: nat;
   holderNumber: nat;
   name: text;
   owner: principal;
   symbol: text;
   totalSupply: nat;
 };
service : (text, text, nat, nat, principal) -> Token
